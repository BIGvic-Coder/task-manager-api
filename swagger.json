{
  "openapi": "3.0.0",
  "info": {
    "title": "Task Manager API",
    "version": "1.0.0",
    "description": "Users, Tasks, Auth & ActivityLog API â€” CRUD, JWT auth, OAuth2, validation, docs"
  },
  "servers": [
    {
      "url": "https://task-manager-api-9qsw.onrender.com/api",
      "description": "Render live server"
    },
    {
      "url": "http://localhost:8080/api",
      "description": "Local server"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "example": "Alice Doe" },
                  "email": { "type": "string", "example": "alice@example.com" },
                  "password": { "type": "string", "example": "secret123" }
                },
                "required": ["name", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered",
            "content": {
              "application/json": {
                "example": {
                  "message": "User registered successfully",
                  "user": {
                    "id": "671a65ffb23a4d1234abcd56",
                    "name": "Alice Doe",
                    "email": "alice@example.com"
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input or email already registered" }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user and get JWT",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "example": "alice@example.com" },
                  "password": { "type": "string", "example": "secret123" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login success",
            "content": {
              "application/json": {
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "user": {
                    "id": "671a65ffb23a4d1234abcd56",
                    "name": "Alice Doe",
                    "email": "alice@example.com"
                  }
                }
              }
            }
          },
          "401": { "description": "Invalid email or password" }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "671a65ffb23a4d1234abcd56",
                    "name": "Alice Doe",
                    "email": "alice@example.com"
                  },
                  {
                    "id": "671a6623b23a4d9876abcd12",
                    "name": "Bob Smith",
                    "email": "bob@example.com"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "201": { "description": "User created" },
          "400": { "description": "Invalid input" }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "User found" },
          "404": { "description": "Not found" }
        }
      },
      "put": {
        "summary": "Update user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated" },
          "404": { "description": "Not found" }
        }
      },
      "delete": {
        "summary": "Delete user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Deleted" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/tasks": {
      "get": {
        "summary": "Get all tasks",
        "responses": {
          "200": { "description": "List of tasks" }
        }
      },
      "post": {
        "summary": "Create new task (requires JWT)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Task" }
            }
          }
        },
        "responses": {
          "201": { "description": "Task created" },
          "400": { "description": "Invalid input" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "summary": "Get task by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Task found" },
          "404": { "description": "Not found" }
        }
      },
      "put": {
        "summary": "Update task (requires JWT)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Task" }
            }
          }
        },
        "responses": {
          "200": { "description": "Task updated" },
          "404": { "description": "Not found" },
          "401": { "description": "Unauthorized" }
        }
      },
      "delete": {
        "summary": "Delete task (requires JWT)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Deleted" },
          "404": { "description": "Not found" },
          "401": { "description": "Unauthorized" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Alice Doe" },
          "email": { "type": "string", "example": "alice@example.com" },
          "password": { "type": "string", "example": "secret123" },
          "role": {
            "type": "string",
            "enum": ["user", "admin"],
            "example": "user"
          }
        },
        "required": ["name", "email", "password"]
      },
      "Task": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Buy groceries" },
          "description": { "type": "string", "example": "Milk, eggs, bread" },
          "priority": {
            "type": "string",
            "enum": ["Low", "Medium", "High"],
            "example": "Medium"
          },
          "status": {
            "type": "string",
            "enum": ["Pending", "In Progress", "Completed"],
            "example": "Pending"
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "example": "2025-12-31"
          },
          "owner": { "type": "string", "example": "60d5f1234abc..." },
          "tags": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["school", "backend"]
          }
        },
        "required": ["title"]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
